"""Test OpenAPI spec generation

This file tests the OpenAPI spec generated by LabThings.
NB in order to avoid duplicating the examples, OpenAPI spec validation is also
done in test_td.py.
"""

import apispec
import pytest
import yaml
from apispec.ext.marshmallow import MarshmallowPlugin
from apispec.utils import validate_spec

from labthings import fields, schema
from labthings.actions.thread import ActionThread
from labthings.apispec import utilities
from labthings.extensions import BaseExtension
from labthings.schema import LogRecordSchema, Schema
from labthings.utilities import get_by_path
from labthings.views import ActionView, EventView, PropertyView


def test_openapi(thing_with_some_views):
    """Make an example Thing and check its openapi description validates"""

    thing_with_some_views.spec.to_yaml()
    thing_with_some_views.spec.to_dict()
    validate_spec(thing_with_some_views.spec)


def test_duplicate_action_name(thing_with_some_views):
    """Check that name clashes don't overwrite schemas"""
    t = thing_with_some_views

    class TestAction(ActionView):
        args = {"m": fields.Integer()}

        def post(self):
            return "POST"

    with pytest.warns(UserWarning):
        t.add_view(TestAction, "TestActionM", endpoint="TestActionM")

    # We should have two actions with the same name
    actions_named_testaction = 0
    for v in t._action_views.values():
        if v.__name__ == "TestAction":
            actions_named_testaction += 1
    assert actions_named_testaction >= 2

    api = t.spec.to_dict()
    original_input_schema = get_by_path(api, ["paths", "/TestAction", "post"])
    modified_input_schema = get_by_path(api, ["paths", "/TestActionM", "post"])
    assert original_input_schema != modified_input_schema


def test_ensure_schema_field_instance(spec):
    ret = utilities.ensure_schema(spec, fields.Integer())
    assert ret == {"type": "integer"}


def test_ensure_schema_nullable_field_instance(spec):
    ret = utilities.ensure_schema(spec, fields.Integer(allow_none=True))
    assert ret == {"type": "integer", "nullable": True}


def test_ensure_schema_field_class(spec):
    ret = utilities.ensure_schema(spec, fields.Integer)
    assert ret == {"type": "integer"}


def test_ensure_schema_class(spec):
    ret = utilities.ensure_schema(spec, LogRecordSchema)
    assert isinstance(ret, Schema)


def test_ensure_schema_instance(spec):
    ret = utilities.ensure_schema(spec, LogRecordSchema())
    assert isinstance(ret, Schema)


def test_ensure_schema_dict(spec):
    ret = utilities.ensure_schema(
        spec,
        {
            "count": fields.Integer(),
            "name": fields.String(),
        },
    )
    assert isinstance(ret, Schema)


def test_ensure_schema_none(spec):
    assert utilities.ensure_schema(spec, None) is None


def test_ensure_schema_error(spec):
    with pytest.raises(TypeError):
        utilities.ensure_schema(spec, Exception)


def test_get_marshmallow_plugin(spec):
    p = utilities.get_marshmallow_plugin(spec)
    assert isinstance(p, MarshmallowPlugin)


def test_get_marchmallow_plugin_empty():
    spec = apispec.APISpec("test", "0", "3.0")
    with pytest.raises(Exception):
        utilities.get_marshmallow_plugin(spec)


def dict_is_openapi(d):
    for k in ["paths", "components"]:
        assert k in d.keys()
    assert d["openapi"].startswith("3.0")
    return True


def test_openapi_json_endpoint(thing, client):
    r = client.get("/docs/openapi")
    assert r.status_code == 200
    assert dict_is_openapi(r.get_json())


def test_openapi_yaml_endpoint(thing, client):
    r = client.get("/docs/openapi.yaml")
    assert r.status_code == 200
    assert dict_is_openapi(yaml.safe_load(r.data))
